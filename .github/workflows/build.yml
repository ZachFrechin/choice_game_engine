name: Build Executables

# Déclencher la compilation lors de la création d'un tag (ex: v1.0.0)
# ou manuellement depuis l'onglet Actions
on:
  push:
    tags:
      - 'v*'  # Déclenche sur les tags comme v1.0.0, v1.1.0, etc.
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            asset_name: ChoiceGameEngine-Windows.zip
          - os: macos-latest
            asset_name: ChoiceGameEngine-macOS.zip
          - os: ubuntu-latest
            asset_name: ChoiceGameEngine-Linux.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Creator
        run: |
          pyinstaller creator.spec --clean

      - name: Build Runtime
        run: |
          pyinstaller runtime.spec --clean

      # Windows: Créer une archive ZIP avec Creator, Runtime et templates
      - name: Package executables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Créer le dossier de package
          New-Item -ItemType Directory -Force -Path package

          # Copier Creator et Runtime
          Copy-Item -Path dist\ChoiceGameCreator -Destination package\ChoiceGameCreator -Recurse
          Copy-Item -Path dist\ChoiceGameRuntime -Destination package\ChoiceGameRuntime -Recurse

          # Copier templates (avec assets et exemple)
          Copy-Item -Path templates -Destination package\templates -Recurse

          # Créer l'archive
          Compress-Archive -Path package\* -DestinationPath ${{ matrix.asset_name }}
        shell: pwsh

      # macOS: Créer une archive ZIP avec Creator, Runtime et templates
      - name: Package executables (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Retirer les attributs de quarantaine (fix code signing issues)
          xattr -cr dist/ChoiceGameCreator.app || true
          xattr -cr dist/ChoiceGameRuntime.app || true

          # Rendre les executables exécutables
          chmod +x dist/ChoiceGameCreator.app/Contents/MacOS/ChoiceGameCreator
          chmod +x dist/ChoiceGameRuntime.app/Contents/MacOS/ChoiceGameRuntime

          # Créer le dossier de package
          mkdir -p package

          # Copier Creator et Runtime
          cp -r dist/ChoiceGameCreator.app package/
          cp -r dist/ChoiceGameRuntime.app package/

          # Copier templates (avec assets et exemple)
          cp -r templates package/

          # Copier les instructions macOS
          cp README_MACOS.md package/

          # Créer l'archive
          cd package
          zip -r ../${{ matrix.asset_name }} *
          cd ..

      # Linux: Créer une archive TAR.GZ avec Creator, Runtime et templates
      - name: Package executables (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Créer le dossier de package
          mkdir -p package

          # Copier Creator et Runtime
          cp -r dist/ChoiceGameCreator package/
          cp -r dist/ChoiceGameRuntime package/

          # Copier templates (avec assets et exemple)
          cp -r templates package/

          # Créer l'archive
          cd package
          tar -czf ../${{ matrix.asset_name }} *
          cd ..

      # Upload l'artifact unique (téléchargeable depuis l'onglet Actions)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  # Job pour créer une release GitHub avec tous les builds
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Seulement si c'est un tag
    permissions:
      contents: write  # Permission nécessaire pour créer une release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true  # Fusionne tous les artifacts dans le même dossier

      - name: List downloaded files
        run: |
          echo "Files in artifacts directory:"
          ls -R artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
